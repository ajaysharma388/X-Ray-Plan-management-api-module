(in-package :aml)

(define-class circumferential-3d-weld-x-ray-mark-class
  :inherit-from(weld-X-Ray-mark-class)
  :properties(
              welds-objects-list                        (default nil)
              label                                     (format nil "~d-X-ray" (trace-from ^weld-object !std-mark))
              x-ray-sheet-width                         (default nil)
              x-ray-sheet-height                        (default nil)
              (weld-object :class 'option-property-class
                label "Select Weld for X-Ray"
                options-list (loop
                               for list in ^^welds-objects-list
                               do
                               collect (first list)
                               )
                labels-list (loop
                              for weld-group in ^welds-objects-list
                              do
                              collect (the std-mark (:from (nth 0 weld-group)))
                              )
                formula (nth 0 (first ^welds-objects-list))
                mode 'menu
                )
              x-ray-location                (default 50)
              current-weld-object-position  (nth (contains-object ^welds-objects-list ^weld-object) ^welds-objects-list)
              mid-angle                     (let* 
                                                ((end 
                                                  (the end-angle 
                                                    (:from 
                                                     (the superior weld-object)))) 
                                                 (start 
                                                  (the start-angle 
                                                    (:from 
                                                     (the superior weld-object)))) 
                                                 (angle 
                                                  (- end start)) 
                                                 (start-angle 
                                                  (* 
                                                   (nth 3 
                                                     (the superior current-weld-object-position)) angle)) 
                                                 (end-angle 
                                                  (* 
                                                   (nth 4 
                                                     (the superior current-weld-object-position)) angle))) 
                                              (+ 
                                               (* 
                                                (/ 
                                                 (- end-angle start-angle) 100) 
                                                (the superior x-ray-location)) start-angle))
              X-Ray-location-center-coords  (list 
                                             (* 
                                              (/ 
                                               (the tank-od 
                                                 (:from 
                                                  (the superior weld-object))) 2) 
                                              (cosd 
                                               (- 360 
                                                 (+ (the start-angle (:from (the superior weld-object))) ^mid-angle))
                                               )
                                              )
                                             (* 
                                              (/ 
                                               (the tank-od 
                                                 (:from 
                                                  (the superior weld-object))) 2) 
                                              (sind 
                                               (- 360 
                                                 (+ (the start-angle (:from (the superior weld-object))) ^mid-angle)))) 
                                             (the elevation 
                                               (:from 
                                                (the superior weld-object)))) 
              orientation                   (list
                                             (rotate 90 
                                               (list 0 0 1)) 
                                             (align 
                                              '(0 0 0) 
                                              '(0 0 1) 
                                              '(1 0 0) 
                                              ^X-Ray-location-center-coords                                                      
                                              (list 
                                               (nth 0 ^X-Ray-location-center-coords)
                                               (nth 1 ^X-Ray-location-center-coords)
                                               0
                                               ) 
                                              '(1 0 0) :move? t :align? t :orient? nil))
              )
  :subobjects (
               (group-welds :class 'group-object
                 object-list (children ^^welds-regions)
                 )
               (welds-regions :class 'series-object
                 class-expression 'Tank-Shell-Circumferential-Weld-3D-region-Class
                 quantity (length ^^welds-objects-list)
                 init-form '(
                             weld-source-object (first (nth ^index ^^^welds-objects-list))
                             start-fraction     (nth 3 (nth ^index ^^^welds-objects-list))
                             end-fraction       (nth 4 (nth ^index ^^^welds-objects-list))                               
                             )
                 )
               )
  )

;;current-weld-object-position  (contains-object ^^welds-objects-list ^^weld-object)

(defun contains-object (list weld)
  (loop
    with counter = 0
    for list-in in list
    do
    (if (equal weld (first list-in))
      (return counter)
      (setf counter (+ counter 1)) 
      )
    )
  )



;;;  (/  (let*
;;;                                                     (
;;;                                                      (angle    (-
;;;                                                                 (the end-angle (:from (the superior weld-object)))
;;;                                                                 (the start-angle (:from (the superior weld-object)))
;;;                                                                 )
;;;                                                        )
;;;                                                      )
;;;                                                   (+
;;;                                                    (+
;;;                                                     (* angle (nth 3 ^current-weld-object-position))
;;;                                                     (* angle (nth 4 ^current-weld-object-position))
;;;                                                     )
;;;                                                    )
;;;                                                   ) 2)